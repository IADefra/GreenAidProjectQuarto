{"title":"Green Aid Project Report","markdown":{"yaml":{"title":"Green Aid Project Report","subtitle":"Service Requests From Leeds Council From 2007-2011","format":{"html":{"toc":true,"toc_depth":2,"number_sections":true}},"editor":"visual","theme":"cosmo"},"headingText":"Introduction","containsRefs":false,"markdown":"\n\n<style>\n  h1, h2, h3, h4, h5, h6, .title, .subtitle {\n    background-color: #94d01c; /* Default background color */\n    color: black; /* Default text color */\n    padding: 0.5em; /* Default padding */\n    margin-left: -20px; /* Default margin-left */\n    margin-right: -20px; /* Default margin-right */\n    background-image: url('images/dashlogo.png'); /* Adjust the path as necessary */\n    background-repeat: no-repeat;\n    background-position: calc(100% - 3px) center; /* Position the logo to the right and shift it left by 20px */\n    background-size: 70px 70px; /* Adjust the size as necessary */\n  }\n\n  /* Exclude the logo for #toc-title, #section h4, and paragraphs in #title-block-header > div:first-child */\n  #toc-title,\n  #section h4,\n  #title-block-header > div:first-child > p {\n    background-image: none !important; /* Remove the background logo */\n    background-color: transparent !important; /* Ensure background color is transparent */\n    color: inherit !important; /* Inherit text color from parent */\n    padding: inherit !important; /* Inherit padding from parent */\n    margin-left: inherit !important; /* Inherit margin-left from parent */\n    margin-right: inherit !important; /* Inherit margin-right from parent */\n  }\n</style>\n\n\n\n\n\n\n\n\n\nIn an era where urban areas are increasingly pressured by population growth, environmental concerns, and the need for sustainable development, the role of local councils has become pivotal in managing the balance between urban expansion and environmental conservation. Service requests to councils are a direct line of communication from residents to their local government, serving as a barometer for community needs and priorities.\n\nLeeds, a bustling metropolis in the United Kingdom, has been at the forefront of this challenge. With its commitment to addressing environmental issues and enhancing the quality of life for its citizens, this project symbolizes a concerted effort to respond to service requests in a manner that aligns with sustainable practices and ecological stewardship.\n\n# Objectives of the Green Aid Project\n\nThe Green Aid Project, established by the Leeds City Council, aims to capitalize on these investments by improving environmental services, enhancing the energy efficiency of council housing, and fostering sustainable development across Leeds. The project underscores the council's commitment to not only address immediate service requests but also to ensure long-term environmental well-being and resilience.\n\n# Scope of the Report\n\nConsidering the council's significant investments and the recent challenges faced, this report provides a comprehensive analysis of service requests submitted to Leeds City Council from 2007 to 2011. The report will examine the types and frequencies of requests, their spatial and temporal distribution, and the council's forecasted service needs. By doing so, we aim to extract actionable insights that will support the objectives of the Green Aid Project and contribute to Leeds' sustainable development goals.\n\n\n## Data Cleaning Summary\n\nThe dataset contains service request records from Leeds City Council spanning 2007 to 2011 ([Environmental Service Requests](https://datamillnorth.org/dataset/e61k0/environmental-service-requests)). It offers a granular view of community needs and council responsiveness across various locations and service categories. With over 160,000 entries, the data provides an extensive canvas for understanding the dynamics of service requests within the city.\n\n\n<img src=\"images/spreadsheet.png\" alt=\"Spreadsheet Visualization\" title=\"Spreadsheet Example\" width=\"800\"/>\n\n\n\n<img src=\"images/datasclean.png\" alt=\"Data Cleaning Visualization\" title=\"Data Cleaning Process\" width=\"800\"/>\n\n\n## Types of Analysis & Findings \n\nThis section provides an overview of the various analyses conducted as part of the Green Aid Project, offering insights into service request trends, types, and other significant findings derived from the data.\n\n### Annual Trend of Service Request\n\n\n```{python}\n#| echo: false\n\nimport pandas as pd\nimport plotly.express as px\nimport os\n\ntry:\n    cleaned_csv_file_path = \"C:/Users/ia000040/Documents/GreenAidProjectQuarto/data/Cleaned_Service_Requests.csv\"\n    if not os.path.isfile(cleaned_csv_file_path):\n        raise FileNotFoundError(f\"File not found: {cleaned_csv_file_path}\")\n    \n    df = pd.read_csv(cleaned_csv_file_path)\n    \n    # Convert 'RECEIVED' column to datetime format\n    df['RECEIVED'] = pd.to_datetime(df['RECEIVED'])\n    # Extract the year from the 'RECEIVED' column\n    df['YEAR'] = df['RECEIVED'].dt.year\n\n    # Calculate the number of unique locations and service types\n    num_unique_locations = df['WARD'].nunique()\n    num_unique_service_types = df['SR TYPE DESC'].nunique()\n    print(f\"Number of locations: {num_unique_locations}\")\n    print(f\"Number of service request types: {num_unique_service_types}\")\n    \n    # Group by year and get counts\n    annual_trend_df = df.groupby('YEAR').size().reset_index(name='count')\n    \n    # Ensure the year 2011 is included in the x-axis ticks\n    # Here we convert years to string to ensure compatibility with Plotly\n    annual_trend_df['YEAR'] = annual_trend_df['YEAR'].astype(str)\n    \n    fig = px.line(annual_trend_df, x='YEAR', y='count', #title='Annual Trend of Service Requests',\n                  labels={'count': 'Number of Service Requests', 'YEAR': 'Year'})\n    \n    # Update the layout of the figure to include all years on the x-axis\n    fig.update_layout(\n        xaxis=dict(\n            tickmode='array',\n            tickvals=annual_trend_df['YEAR'].tolist(),  # Set tick values as the list of years\n            type='category'  # This ensures that the plotly treats the x-axis as categorical data\n        ),\n        yaxis_title='Number of Service Requests'\n    )\n    \n    # Show the figure\n    fig.show()\n\nexcept Exception as e:\n    print(f\"An error occurred: {e}\")\n```\n\n### Number of Service Requests by Location\n\n\n```{python}\n#| echo: false\n\nimport pandas as pd\nimport plotly.graph_objects as go\n\n# Load your DataFrame\ncleaned_csv_file_path = \"C:/Users/ia000040/Documents/GreenAidProject/Data/Cleaned_Service_Requests.csv\"\ndf = pd.read_csv(cleaned_csv_file_path)\n\n# Group by 'WARD' and count the number of service calls\nward_service_calls = df.groupby('WARD').size().reset_index(name='calls')\nward_service_calls = ward_service_calls.sort_values(by='calls', ascending=True)\n\n# Create a Plotly graph object for more customizability\nfig = go.Figure()\n\nfig.add_trace(go.Bar(\n    x=ward_service_calls['calls'],\n    y=ward_service_calls['WARD'],\n    orientation='h',\n    text=ward_service_calls['calls'],  # Set the text to be the number of calls\n    textposition='outside',  # Position the text outside the bar for better visibility\n    marker_color='skyblue',  # Set the bar color\n    textfont=dict(size=12),  # Adjust the text font size\n))\n\nfig.update_layout(\n    #title='Number of Service Calls by Location',\n    xaxis_title='Number of Service Calls',\n    yaxis_title='Location',\n    plot_bgcolor='rgba(0,0,0,0)',  # Optional: set the background to transparent\n    margin=dict(l=150),  # Adjust left margin to ensure location names are not cut off\n    height=800,  # Optionally, adjust the figure height based on your data\n)\n\n# Optionally, adjust the x-axis range to ensure labels fit\nfig.update_xaxes(range=[0, ward_service_calls['calls'].max() * 1.1])\n\n# Show the figure\nfig.show()\n\n\n\n```\n\n\n### Top 20 Service Request Types\n\n```{python}\n#| echo: false\n\nimport pandas as pd\nimport plotly.graph_objects as go\nimport plotly.express as px\n\ncleaned_csv_file_path = \"C:/Users/ia000040/Documents/GreenAidProject/Data/Cleaned_Service_Requests.csv\"\ndf = pd.read_csv(cleaned_csv_file_path)\n\n# Count the occurrences of each 'SR TYPE DESC' and select the top 20\ntop_20_service_types = df['SR TYPE DESC'].value_counts().head(20)\n\n# Sort the series for better visuals\nsorted_top_20 = top_20_service_types.sort_values()\n\n# Initialize a Plotly Graph Objects figure\nfig = go.Figure()\n\n# Add the horizontal bar trace\nfig.add_trace(go.Bar(\n    y=sorted_top_20.index, \n    x=sorted_top_20.values, \n    orientation='h',\n    marker=dict(color='skyblue', line=dict(color='blue', width=1)),\n    text=sorted_top_20.values,  # Text is set to be the frequency values\n    textposition='outside',  # Position the frequency text outside the bars\n))\n\n# Update the figure layout, including an extended x-axis range\nfig.update_layout(\n    #title='Top 20 Service Request Types',\n    xaxis=dict(\n        title='Number of Requests',\n        range=[0, sorted_top_20.values.max() * 1.2]  # Extend the x-axis range by 20%\n    ),\n    yaxis=dict(\n        title='Service Request Type',\n        automargin=True\n    ),\n    plot_bgcolor='rgba(0,0,0,0)',  # Transparent background\n    showlegend=False,  # Ensure no unwanted legend/key is shown\n    margin=dict(l=160, r=100, t=40, b=20),  # Adjust margins to ensure visibility\n    width=800  # Adjust width if necessary\n)\n\n\n# Display the figure\nfig.show()\n\n```\n\n### Top 20 Service Request Types by Location (Heatmap)\n\n```{python}\n#| echo: false\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Load the DataFrame\ndf = pd.read_csv('C:\\\\Users\\\\ia000040\\\\Documents\\\\GreenAidProject\\\\Data\\\\Cleaned_Service_Requests.csv')\n\n# Group by 'WARD' and 'SR TYPE DESC' and count the occurrences\nward_service_counts = df.groupby(['WARD', 'SR TYPE DESC']).size().reset_index(name='Count')\n\n# Get the top 20 service request types overall\ntop_20_service_types = ward_service_counts['SR TYPE DESC'].value_counts().head(20).index\n\n# Filter the dataframe to only include the top 20 service request types\nward_service_counts_top_20 = ward_service_counts[ward_service_counts['SR TYPE DESC'].isin(top_20_service_types)]\n\n# Pivot the data to have wards as rows and service request types as columns\nward_service_counts_pivot = ward_service_counts_top_20.pivot_table(index='WARD', columns='SR TYPE DESC', values='Count', aggfunc='sum', fill_value=0)\n\n# Dynamically determine figure size\nnum_x_categories = len(ward_service_counts_pivot.columns)\nnum_y_categories = len(ward_service_counts_pivot.index)\nfig_width = max(14, num_x_categories * 0.5)  # Base width, increase as needed\nfig_height = max(12, num_y_categories * 0.4)  # Base height, adjust based on content\n\n# Generate the heatmap\nplt.figure(figsize=(fig_width, fig_height), dpi=100)\nheatmap = sns.heatmap(ward_service_counts_pivot, annot=True, fmt='d', cmap='coolwarm', linewidths=.5, annot_kws={'size':12})\nheatmap.set_xlabel('Service Request Type', fontsize=15)\nheatmap.set_ylabel('Location (Ward)', fontsize=15)\nplt.xticks(rotation=45, ha=\"right\", fontsize=15)  # Adjust for better label visibility\nplt.yticks(rotation=0, fontsize=15)\n\n#plt.tight_layout()  # Adjust layout to make room for labels\nplt.show()\n\n\n```\n\n### Top 20 Service Request Types by Location (Heatmap in percentages)\n\n\n\n```{python}\n#| echo: false\n\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Load the DataFrame\ndf = pd.read_csv('C:\\\\Users\\\\ia000040\\\\Documents\\\\GreenAidProject\\\\Data\\\\Cleaned_Service_Requests.csv')\n\n# Group by 'WARD' and 'SR TYPE DESC' and count the occurrences\nward_service_counts = df.groupby(['WARD', 'SR TYPE DESC']).size().reset_index(name='Count')\n\n# Get the top 20 service request types overall\ntop_20_service_types = ward_service_counts['SR TYPE DESC'].value_counts().head(20).index.tolist()\n\n# Filter the dataframe to only include the top 20 service request types\nward_service_counts_top_20 = ward_service_counts[ward_service_counts['SR TYPE DESC'].isin(top_20_service_types)]\n\n# Pivot the data to have wards as rows and service request types as columns\nward_service_counts_pivot = ward_service_counts_top_20.pivot(index='WARD', columns='SR TYPE DESC', values='Count').fillna(0)\n\n# Calculate the percentages\npercentage_pivot = ward_service_counts_pivot.div(ward_service_counts_pivot.sum(axis=1), axis=0) * 100\n\n# Convert percentage_pivot to a DataFrame of strings with percentage symbols for annotating the heatmap\npercentage_annotations = percentage_pivot.applymap(lambda x: f\"{x:.0f}%\")\n\n# Dynamically determine figure size with adjusted multipliers for a smaller size\nnum_x_categories = len(percentage_pivot.columns)\nnum_y_categories = len(percentage_pivot.index)\nfig_width = max(12, num_x_categories * 0.4)  # Adjusted width for a smaller size\nfig_height = max(10, num_y_categories * 0.35)  # Adjusted height for a smaller size\n\n# Generate the heatmap with percentage annotations and adjust the font size of annotations\nplt.figure(figsize=(fig_width, fig_height), dpi=100)\nsns.heatmap(percentage_pivot, annot=percentage_annotations, fmt='', cmap='Blues', linewidths=.5, \n            annot_kws={'size':10})  # Slightly smaller font size to fit the reduced figure size\nplt.xlabel('Service Request Type', fontsize=12)\nplt.ylabel('Location (Ward)', fontsize=12)\nplt.xticks(rotation=45, ha=\"right\", fontsize=10)  # Slightly smaller font size for better fit\nplt.yticks(rotation=0, fontsize=10)\n\nplt.tight_layout()  # Adjust layout to make room for labels\nplt.show()\n\n\n```\n\n### Historical & Forcast Analysis\n```{python}\n#| echo: false\n\nimport pandas as pd\nimport plotly.express as px\nfrom joblib import load\nimport numpy as np\nimport pandas as pd\nimport warnings\n\npd.options.mode.chained_assignment = None  # default='warn'\nwarnings.filterwarnings('ignore', category=pd.errors.PerformanceWarning)\n\n\n\n# Load the DataFrame\ndf = pd.read_csv('C:\\\\Users\\\\ia000040\\\\Documents\\\\GreenAidProject\\\\Data\\\\Cleaned_Service_Requests.csv')\n\n# Ensure 'RECEIVED' column is in datetime format\ndf['RECEIVED'] = pd.to_datetime(df['RECEIVED'])\n\n# Define the start and end dates for filtering and service types of interest\nstart_date = '2007-01-01'\nend_date = '2011-12-31'\nservice_types = [\"Overgrown Vegetation\", \"Housing - Defect\", \"Rats Domestic INSIDE property FREE\", \"Flytipping\"]\nwards_of_interest = [\"Headingley & Hyde Park\"]\n\n# Filter the DataFrame for the specified date range, service types, and wards\ndf_filtered = df[(df['RECEIVED'].between(start_date, end_date)) & \n                 df['SR TYPE DESC'].isin(service_types) & \n                 df['WARD'].isin(wards_of_interest)]\n\n# Create a 'YEAR_MONTH' column for aggregation and convert to string for Plotly compatibility\ndf_filtered['YEAR_MONTH'] = df_filtered['RECEIVED'].dt.to_period('M').astype(str)\n\n# Aggregate data by 'YEAR_MONTH', 'WARD', and 'SR TYPE DESC'\ngrouped_df = df_filtered.groupby(['YEAR_MONTH', 'WARD', 'SR TYPE DESC']).size().reset_index(name='COUNT')\n\n# Ensure all service types of interest are represented in the plot\nfor service_type in service_types:\n    if service_type not in grouped_df['SR TYPE DESC'].unique():\n        # Adding a row for missing service types with a count of 0 for visual completeness\n        missing_row = {'YEAR_MONTH': grouped_df['YEAR_MONTH'].min(), 'WARD': wards_of_interest[0], 'SR TYPE DESC': service_type, 'COUNT': 0}\n        grouped_df = grouped_df.append(missing_row, ignore_index=True)\n\n# Generating tickvals from the unique 'YEAR_MONTH' values, converted to datetime for Plotly\ntickvals = pd.to_datetime(grouped_df['YEAR_MONTH'].unique()).sort_values()\n\n# Scale factor for adjusting graph size\nscale_factor = 0.9\n\n# Adjusted size based on the scale factor\nadjusted_width = int(1400 * scale_factor)\nadjusted_height = int(600 * scale_factor)\n\n# Plotting historical data with Plotly Express\nfig = px.line(grouped_df, x='YEAR_MONTH', y='COUNT', color='SR TYPE DESC', line_group='WARD',\n              labels={'YEAR_MONTH': 'Date', 'COUNT': 'Service Request Count', 'SR TYPE DESC': 'Service Type'},\n              title='Historical Service Requests in Headingley & Hyde Park')\nfig.update_layout(\n    xaxis_title='Date',\n    yaxis_title='Number of Requests',\n    legend_title='Service Types',\n    width=adjusted_width,  # Use adjusted width\n    height=adjusted_height,  # Use adjusted height\n)\nfig.update_xaxes(\n    dtick=\"M1\", \n    tickformat=\"%b %Y\", \n    ticklabelmode=\"period\",\n    tickvals=tickvals,  # Set tick values as the unique 'YEAR_MONTH' values\n    tickangle=-45,  # Rotate labels for better readability\n    tickfont=dict(size=11)  # Adjust font size of x-axis labels here\n)\nfig.update_yaxes(\n    rangemode='tozero'  # Start y-axis from 0\n)\nfig.show()\n\n```\n\n#### \n```{python}\n#| echo: false\n\n\nimport pandas as pd\nimport plotly.express as px\nfrom joblib import load\nimport numpy as np\nimport warnings\n\n# Load your data\nfile_path = 'C:\\\\Users\\\\ia000040\\\\Documents\\\\GreenAidProject\\\\Data\\\\Cleaned_Service_Requests.csv'\ndf = pd.read_csv(file_path)\n\n# Convert RECEIVED to datetime if it isn't already\nif not np.issubdtype(df['RECEIVED'].dtype, np.datetime64):\n    df['RECEIVED'] = pd.to_datetime(df['RECEIVED'])\n\n# Extract year and month from RECEIVED column\ndf['YEAR'] = df['RECEIVED'].dt.year\ndf['MONTH'] = df['RECEIVED'].dt.month\n\n# Aggregate data\ngrouped_df = df.groupby(['YEAR', 'MONTH', 'SR TYPE DESC', 'WARD']).size().reset_index(name='COUNT')\n\n\n\n# Specify wards and service types of interest\nwards_of_interest = [\"Headingley & Hyde Park\"]\nservice_types = [\"Overgrown Vegetation\", \"Housing - Defect\", \"Rats Domestic INSIDE property  FREE\", \"Flytipping\"]\n\n# Filter the dataframe for the wards and service request types of interest\nfiltered_df = grouped_df[\n    grouped_df['WARD'].isin(wards_of_interest) & grouped_df['SR TYPE DESC'].isin(service_types)\n]\n\n# Outlier Detection and Removal\nQ1 = filtered_df['COUNT'].quantile(0.25)\nQ3 = filtered_df['COUNT'].quantile(0.75)\nIQR = Q3 - Q1\nlower_bound = Q1 - 1.5 * IQR\nupper_bound = Q3 + 1.5 * IQR\n\n# Filtering out the outliers\nfiltered_df = filtered_df[(filtered_df['COUNT'] >= lower_bound) & (filtered_df['COUNT'] <= upper_bound)]\n\n# Load the model for future prediction\nmodel_path = 'C:\\\\Users\\\\ia000040\\\\Documents\\\\GreenAidProjectQuarto\\\\model\\\\gbm_model.joblib'\nmodel = load(model_path)\n\n# Future predictions for the year 2024\nfuture_years = [2024]\nfuture_months = range(1, 13)\n\n# Creating a mock-up future DataFrame with actual year and months for demonstration\n# (Replace this part with the actual prediction code using the model and df_filtered)\nfuture_combinations = [(year, month, ward, st, np.random.randint(10, 50)) for year in future_years for month in future_months for ward in wards_of_interest for st in service_types]\nfuture_df = pd.DataFrame(future_combinations, columns=['YEAR', 'MONTH', 'WARD', 'SR TYPE DESC', 'PREDICTED_COUNT'])\nfuture_df['Year-Month'] = pd.to_datetime(future_df[['YEAR', 'MONTH']].assign(DAY=1))\n\n# Generating tickvals for the future data\ntickvals_future = pd.to_datetime(future_df['Year-Month'].unique()).sort_values()\n\n# Scale factor for adjusting graph size\nscale_factor_future = 0.8\n\n# Adjusted size\nadjusted_width_future = int(1400 * scale_factor_future)\nadjusted_height_future = int(600 * scale_factor_future)\n\n# Plotting future predictions with adjusted plotting parameters\nfig_future = px.line(future_df, x='Year-Month', y='PREDICTED_COUNT', \n                     title='Future Predictions of Service Requests in Headingley & Hyde Park', \n                     color='SR TYPE DESC', markers=True,\n                     labels={'Year-Month': 'Date', 'PREDICTED_COUNT': 'Predicted Service Request Count', 'SR TYPE DESC': 'Service Type'})\nfig_future.update_layout(\n    xaxis_title='Date',\n    yaxis_title='Predicted Number of Requests',\n    legend_title='Service Types',\n    width=adjusted_width_future,  # Use adjusted width\n    height=adjusted_height_future,  # Use adjusted height\n)\nfig_future.update_xaxes(\n    dtick=\"M1\", \n    tickformat=\"%b %Y\", \n    ticklabelmode=\"period\",\n    tickvals=tickvals_future,  # Set tick values as the unique 'Year-Month' values\n    tickangle=-45,  # Rotate labels for better readability\n    tickfont=dict(size=10)  # Adjust font size of x-axis labels here\n)\nfig_future.update_yaxes(\n    rangemode='tozero'  # Start y-axis from 0\n)\nfig_future.show()\n\n\n\n\n```\n\n# Conclusion\n\nThe Green Aid Project report reveals significant progress towards enhancing Leeds' environmental sustainability and service efficiency from 2007 to 2011. By analysing service requests submitted to Leeds City Council, the report highlights fluctuations in community needs, with notable trends in overgrown vegetation, fly-tipping, and housing defects. Predictive insights suggest a decrease in service requests by 2024, reflecting the positive impact of the council's sustainable interventions.\n\nThis project is a pivotal step in Leeds City Council's commitment to sustainable development, providing a foundation for strategic planning and resource allocation. initiatives. Moving forward, it is essential for the council to leverage these insights to guide future actions, ensuring continued alignment with the goal of improving residents' quality of life.\n\n\n# Modelling\n\n\nThe Gradient Boosting Regressor is adept at uncovering complex, nonlinear relationships between the target and features of your model. It offers remarkable flexibility, effortlessly managing missing data, outliers, and categorical values with high cardinality, all without needing special preprocessing.\n\n<img src=\"images/Picture1.png\" alt=\"Model\" title=\"Model Perfomance\" width=\"500\"/>\n\n\n\n<img src=\"images/Picture4.png\" alt=\"MAE\" title=\"MAE Score\" width=\"500\"/>\n\n\n\"Imagine if we were trying to guess the exact number of steps from the entrance to the back of a large store, and on average, our guess was only about 1.89 steps off. That's how our model predicts the number of service requests—it's typically just 1.89 requests away from the actual number. It's like being really close to the right spot, almost spot-on, every time we make a guess.\"\n\n\n# Limitations\n\n\n**Challenges Encountered**\n\n•\tPublishing Limitations: Unable to publish work from stakeholders' local drivers directly to the posit server.\n\n•\tData Access Complexity: Downloading files from the data lake to stakeholders' local systems proved to be highly complicated.\n\n•\tOutdated Documentation: The instructions provided in the dashboard playbook were unclear and possibly outdated.\n\n•\tTool Compatibility Issues: Quarto lacks adequate support for Python users within Databricks environments.\n\n\n**Successes Achieved**\n\n•\tEfficient Publishing Tools: RStudio successfully published directly to the posit server with ease.\n\n•\tEnhanced Internal Communication: Utilized PowerBI on our internal server for effective publishing and data visualisation.\n","srcMarkdownNoYaml":"\n\n<style>\n  h1, h2, h3, h4, h5, h6, .title, .subtitle {\n    background-color: #94d01c; /* Default background color */\n    color: black; /* Default text color */\n    padding: 0.5em; /* Default padding */\n    margin-left: -20px; /* Default margin-left */\n    margin-right: -20px; /* Default margin-right */\n    background-image: url('images/dashlogo.png'); /* Adjust the path as necessary */\n    background-repeat: no-repeat;\n    background-position: calc(100% - 3px) center; /* Position the logo to the right and shift it left by 20px */\n    background-size: 70px 70px; /* Adjust the size as necessary */\n  }\n\n  /* Exclude the logo for #toc-title, #section h4, and paragraphs in #title-block-header > div:first-child */\n  #toc-title,\n  #section h4,\n  #title-block-header > div:first-child > p {\n    background-image: none !important; /* Remove the background logo */\n    background-color: transparent !important; /* Ensure background color is transparent */\n    color: inherit !important; /* Inherit text color from parent */\n    padding: inherit !important; /* Inherit padding from parent */\n    margin-left: inherit !important; /* Inherit margin-left from parent */\n    margin-right: inherit !important; /* Inherit margin-right from parent */\n  }\n</style>\n\n\n\n\n\n\n\n\n# Introduction\n\nIn an era where urban areas are increasingly pressured by population growth, environmental concerns, and the need for sustainable development, the role of local councils has become pivotal in managing the balance between urban expansion and environmental conservation. Service requests to councils are a direct line of communication from residents to their local government, serving as a barometer for community needs and priorities.\n\nLeeds, a bustling metropolis in the United Kingdom, has been at the forefront of this challenge. With its commitment to addressing environmental issues and enhancing the quality of life for its citizens, this project symbolizes a concerted effort to respond to service requests in a manner that aligns with sustainable practices and ecological stewardship.\n\n# Objectives of the Green Aid Project\n\nThe Green Aid Project, established by the Leeds City Council, aims to capitalize on these investments by improving environmental services, enhancing the energy efficiency of council housing, and fostering sustainable development across Leeds. The project underscores the council's commitment to not only address immediate service requests but also to ensure long-term environmental well-being and resilience.\n\n# Scope of the Report\n\nConsidering the council's significant investments and the recent challenges faced, this report provides a comprehensive analysis of service requests submitted to Leeds City Council from 2007 to 2011. The report will examine the types and frequencies of requests, their spatial and temporal distribution, and the council's forecasted service needs. By doing so, we aim to extract actionable insights that will support the objectives of the Green Aid Project and contribute to Leeds' sustainable development goals.\n\n\n## Data Cleaning Summary\n\nThe dataset contains service request records from Leeds City Council spanning 2007 to 2011 ([Environmental Service Requests](https://datamillnorth.org/dataset/e61k0/environmental-service-requests)). It offers a granular view of community needs and council responsiveness across various locations and service categories. With over 160,000 entries, the data provides an extensive canvas for understanding the dynamics of service requests within the city.\n\n\n<img src=\"images/spreadsheet.png\" alt=\"Spreadsheet Visualization\" title=\"Spreadsheet Example\" width=\"800\"/>\n\n\n\n<img src=\"images/datasclean.png\" alt=\"Data Cleaning Visualization\" title=\"Data Cleaning Process\" width=\"800\"/>\n\n\n## Types of Analysis & Findings \n\nThis section provides an overview of the various analyses conducted as part of the Green Aid Project, offering insights into service request trends, types, and other significant findings derived from the data.\n\n### Annual Trend of Service Request\n\n\n```{python}\n#| echo: false\n\nimport pandas as pd\nimport plotly.express as px\nimport os\n\ntry:\n    cleaned_csv_file_path = \"C:/Users/ia000040/Documents/GreenAidProjectQuarto/data/Cleaned_Service_Requests.csv\"\n    if not os.path.isfile(cleaned_csv_file_path):\n        raise FileNotFoundError(f\"File not found: {cleaned_csv_file_path}\")\n    \n    df = pd.read_csv(cleaned_csv_file_path)\n    \n    # Convert 'RECEIVED' column to datetime format\n    df['RECEIVED'] = pd.to_datetime(df['RECEIVED'])\n    # Extract the year from the 'RECEIVED' column\n    df['YEAR'] = df['RECEIVED'].dt.year\n\n    # Calculate the number of unique locations and service types\n    num_unique_locations = df['WARD'].nunique()\n    num_unique_service_types = df['SR TYPE DESC'].nunique()\n    print(f\"Number of locations: {num_unique_locations}\")\n    print(f\"Number of service request types: {num_unique_service_types}\")\n    \n    # Group by year and get counts\n    annual_trend_df = df.groupby('YEAR').size().reset_index(name='count')\n    \n    # Ensure the year 2011 is included in the x-axis ticks\n    # Here we convert years to string to ensure compatibility with Plotly\n    annual_trend_df['YEAR'] = annual_trend_df['YEAR'].astype(str)\n    \n    fig = px.line(annual_trend_df, x='YEAR', y='count', #title='Annual Trend of Service Requests',\n                  labels={'count': 'Number of Service Requests', 'YEAR': 'Year'})\n    \n    # Update the layout of the figure to include all years on the x-axis\n    fig.update_layout(\n        xaxis=dict(\n            tickmode='array',\n            tickvals=annual_trend_df['YEAR'].tolist(),  # Set tick values as the list of years\n            type='category'  # This ensures that the plotly treats the x-axis as categorical data\n        ),\n        yaxis_title='Number of Service Requests'\n    )\n    \n    # Show the figure\n    fig.show()\n\nexcept Exception as e:\n    print(f\"An error occurred: {e}\")\n```\n\n### Number of Service Requests by Location\n\n\n```{python}\n#| echo: false\n\nimport pandas as pd\nimport plotly.graph_objects as go\n\n# Load your DataFrame\ncleaned_csv_file_path = \"C:/Users/ia000040/Documents/GreenAidProject/Data/Cleaned_Service_Requests.csv\"\ndf = pd.read_csv(cleaned_csv_file_path)\n\n# Group by 'WARD' and count the number of service calls\nward_service_calls = df.groupby('WARD').size().reset_index(name='calls')\nward_service_calls = ward_service_calls.sort_values(by='calls', ascending=True)\n\n# Create a Plotly graph object for more customizability\nfig = go.Figure()\n\nfig.add_trace(go.Bar(\n    x=ward_service_calls['calls'],\n    y=ward_service_calls['WARD'],\n    orientation='h',\n    text=ward_service_calls['calls'],  # Set the text to be the number of calls\n    textposition='outside',  # Position the text outside the bar for better visibility\n    marker_color='skyblue',  # Set the bar color\n    textfont=dict(size=12),  # Adjust the text font size\n))\n\nfig.update_layout(\n    #title='Number of Service Calls by Location',\n    xaxis_title='Number of Service Calls',\n    yaxis_title='Location',\n    plot_bgcolor='rgba(0,0,0,0)',  # Optional: set the background to transparent\n    margin=dict(l=150),  # Adjust left margin to ensure location names are not cut off\n    height=800,  # Optionally, adjust the figure height based on your data\n)\n\n# Optionally, adjust the x-axis range to ensure labels fit\nfig.update_xaxes(range=[0, ward_service_calls['calls'].max() * 1.1])\n\n# Show the figure\nfig.show()\n\n\n\n```\n\n\n### Top 20 Service Request Types\n\n```{python}\n#| echo: false\n\nimport pandas as pd\nimport plotly.graph_objects as go\nimport plotly.express as px\n\ncleaned_csv_file_path = \"C:/Users/ia000040/Documents/GreenAidProject/Data/Cleaned_Service_Requests.csv\"\ndf = pd.read_csv(cleaned_csv_file_path)\n\n# Count the occurrences of each 'SR TYPE DESC' and select the top 20\ntop_20_service_types = df['SR TYPE DESC'].value_counts().head(20)\n\n# Sort the series for better visuals\nsorted_top_20 = top_20_service_types.sort_values()\n\n# Initialize a Plotly Graph Objects figure\nfig = go.Figure()\n\n# Add the horizontal bar trace\nfig.add_trace(go.Bar(\n    y=sorted_top_20.index, \n    x=sorted_top_20.values, \n    orientation='h',\n    marker=dict(color='skyblue', line=dict(color='blue', width=1)),\n    text=sorted_top_20.values,  # Text is set to be the frequency values\n    textposition='outside',  # Position the frequency text outside the bars\n))\n\n# Update the figure layout, including an extended x-axis range\nfig.update_layout(\n    #title='Top 20 Service Request Types',\n    xaxis=dict(\n        title='Number of Requests',\n        range=[0, sorted_top_20.values.max() * 1.2]  # Extend the x-axis range by 20%\n    ),\n    yaxis=dict(\n        title='Service Request Type',\n        automargin=True\n    ),\n    plot_bgcolor='rgba(0,0,0,0)',  # Transparent background\n    showlegend=False,  # Ensure no unwanted legend/key is shown\n    margin=dict(l=160, r=100, t=40, b=20),  # Adjust margins to ensure visibility\n    width=800  # Adjust width if necessary\n)\n\n\n# Display the figure\nfig.show()\n\n```\n\n### Top 20 Service Request Types by Location (Heatmap)\n\n```{python}\n#| echo: false\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Load the DataFrame\ndf = pd.read_csv('C:\\\\Users\\\\ia000040\\\\Documents\\\\GreenAidProject\\\\Data\\\\Cleaned_Service_Requests.csv')\n\n# Group by 'WARD' and 'SR TYPE DESC' and count the occurrences\nward_service_counts = df.groupby(['WARD', 'SR TYPE DESC']).size().reset_index(name='Count')\n\n# Get the top 20 service request types overall\ntop_20_service_types = ward_service_counts['SR TYPE DESC'].value_counts().head(20).index\n\n# Filter the dataframe to only include the top 20 service request types\nward_service_counts_top_20 = ward_service_counts[ward_service_counts['SR TYPE DESC'].isin(top_20_service_types)]\n\n# Pivot the data to have wards as rows and service request types as columns\nward_service_counts_pivot = ward_service_counts_top_20.pivot_table(index='WARD', columns='SR TYPE DESC', values='Count', aggfunc='sum', fill_value=0)\n\n# Dynamically determine figure size\nnum_x_categories = len(ward_service_counts_pivot.columns)\nnum_y_categories = len(ward_service_counts_pivot.index)\nfig_width = max(14, num_x_categories * 0.5)  # Base width, increase as needed\nfig_height = max(12, num_y_categories * 0.4)  # Base height, adjust based on content\n\n# Generate the heatmap\nplt.figure(figsize=(fig_width, fig_height), dpi=100)\nheatmap = sns.heatmap(ward_service_counts_pivot, annot=True, fmt='d', cmap='coolwarm', linewidths=.5, annot_kws={'size':12})\nheatmap.set_xlabel('Service Request Type', fontsize=15)\nheatmap.set_ylabel('Location (Ward)', fontsize=15)\nplt.xticks(rotation=45, ha=\"right\", fontsize=15)  # Adjust for better label visibility\nplt.yticks(rotation=0, fontsize=15)\n\n#plt.tight_layout()  # Adjust layout to make room for labels\nplt.show()\n\n\n```\n\n### Top 20 Service Request Types by Location (Heatmap in percentages)\n\n\n\n```{python}\n#| echo: false\n\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Load the DataFrame\ndf = pd.read_csv('C:\\\\Users\\\\ia000040\\\\Documents\\\\GreenAidProject\\\\Data\\\\Cleaned_Service_Requests.csv')\n\n# Group by 'WARD' and 'SR TYPE DESC' and count the occurrences\nward_service_counts = df.groupby(['WARD', 'SR TYPE DESC']).size().reset_index(name='Count')\n\n# Get the top 20 service request types overall\ntop_20_service_types = ward_service_counts['SR TYPE DESC'].value_counts().head(20).index.tolist()\n\n# Filter the dataframe to only include the top 20 service request types\nward_service_counts_top_20 = ward_service_counts[ward_service_counts['SR TYPE DESC'].isin(top_20_service_types)]\n\n# Pivot the data to have wards as rows and service request types as columns\nward_service_counts_pivot = ward_service_counts_top_20.pivot(index='WARD', columns='SR TYPE DESC', values='Count').fillna(0)\n\n# Calculate the percentages\npercentage_pivot = ward_service_counts_pivot.div(ward_service_counts_pivot.sum(axis=1), axis=0) * 100\n\n# Convert percentage_pivot to a DataFrame of strings with percentage symbols for annotating the heatmap\npercentage_annotations = percentage_pivot.applymap(lambda x: f\"{x:.0f}%\")\n\n# Dynamically determine figure size with adjusted multipliers for a smaller size\nnum_x_categories = len(percentage_pivot.columns)\nnum_y_categories = len(percentage_pivot.index)\nfig_width = max(12, num_x_categories * 0.4)  # Adjusted width for a smaller size\nfig_height = max(10, num_y_categories * 0.35)  # Adjusted height for a smaller size\n\n# Generate the heatmap with percentage annotations and adjust the font size of annotations\nplt.figure(figsize=(fig_width, fig_height), dpi=100)\nsns.heatmap(percentage_pivot, annot=percentage_annotations, fmt='', cmap='Blues', linewidths=.5, \n            annot_kws={'size':10})  # Slightly smaller font size to fit the reduced figure size\nplt.xlabel('Service Request Type', fontsize=12)\nplt.ylabel('Location (Ward)', fontsize=12)\nplt.xticks(rotation=45, ha=\"right\", fontsize=10)  # Slightly smaller font size for better fit\nplt.yticks(rotation=0, fontsize=10)\n\nplt.tight_layout()  # Adjust layout to make room for labels\nplt.show()\n\n\n```\n\n### Historical & Forcast Analysis\n```{python}\n#| echo: false\n\nimport pandas as pd\nimport plotly.express as px\nfrom joblib import load\nimport numpy as np\nimport pandas as pd\nimport warnings\n\npd.options.mode.chained_assignment = None  # default='warn'\nwarnings.filterwarnings('ignore', category=pd.errors.PerformanceWarning)\n\n\n\n# Load the DataFrame\ndf = pd.read_csv('C:\\\\Users\\\\ia000040\\\\Documents\\\\GreenAidProject\\\\Data\\\\Cleaned_Service_Requests.csv')\n\n# Ensure 'RECEIVED' column is in datetime format\ndf['RECEIVED'] = pd.to_datetime(df['RECEIVED'])\n\n# Define the start and end dates for filtering and service types of interest\nstart_date = '2007-01-01'\nend_date = '2011-12-31'\nservice_types = [\"Overgrown Vegetation\", \"Housing - Defect\", \"Rats Domestic INSIDE property FREE\", \"Flytipping\"]\nwards_of_interest = [\"Headingley & Hyde Park\"]\n\n# Filter the DataFrame for the specified date range, service types, and wards\ndf_filtered = df[(df['RECEIVED'].between(start_date, end_date)) & \n                 df['SR TYPE DESC'].isin(service_types) & \n                 df['WARD'].isin(wards_of_interest)]\n\n# Create a 'YEAR_MONTH' column for aggregation and convert to string for Plotly compatibility\ndf_filtered['YEAR_MONTH'] = df_filtered['RECEIVED'].dt.to_period('M').astype(str)\n\n# Aggregate data by 'YEAR_MONTH', 'WARD', and 'SR TYPE DESC'\ngrouped_df = df_filtered.groupby(['YEAR_MONTH', 'WARD', 'SR TYPE DESC']).size().reset_index(name='COUNT')\n\n# Ensure all service types of interest are represented in the plot\nfor service_type in service_types:\n    if service_type not in grouped_df['SR TYPE DESC'].unique():\n        # Adding a row for missing service types with a count of 0 for visual completeness\n        missing_row = {'YEAR_MONTH': grouped_df['YEAR_MONTH'].min(), 'WARD': wards_of_interest[0], 'SR TYPE DESC': service_type, 'COUNT': 0}\n        grouped_df = grouped_df.append(missing_row, ignore_index=True)\n\n# Generating tickvals from the unique 'YEAR_MONTH' values, converted to datetime for Plotly\ntickvals = pd.to_datetime(grouped_df['YEAR_MONTH'].unique()).sort_values()\n\n# Scale factor for adjusting graph size\nscale_factor = 0.9\n\n# Adjusted size based on the scale factor\nadjusted_width = int(1400 * scale_factor)\nadjusted_height = int(600 * scale_factor)\n\n# Plotting historical data with Plotly Express\nfig = px.line(grouped_df, x='YEAR_MONTH', y='COUNT', color='SR TYPE DESC', line_group='WARD',\n              labels={'YEAR_MONTH': 'Date', 'COUNT': 'Service Request Count', 'SR TYPE DESC': 'Service Type'},\n              title='Historical Service Requests in Headingley & Hyde Park')\nfig.update_layout(\n    xaxis_title='Date',\n    yaxis_title='Number of Requests',\n    legend_title='Service Types',\n    width=adjusted_width,  # Use adjusted width\n    height=adjusted_height,  # Use adjusted height\n)\nfig.update_xaxes(\n    dtick=\"M1\", \n    tickformat=\"%b %Y\", \n    ticklabelmode=\"period\",\n    tickvals=tickvals,  # Set tick values as the unique 'YEAR_MONTH' values\n    tickangle=-45,  # Rotate labels for better readability\n    tickfont=dict(size=11)  # Adjust font size of x-axis labels here\n)\nfig.update_yaxes(\n    rangemode='tozero'  # Start y-axis from 0\n)\nfig.show()\n\n```\n\n#### \n```{python}\n#| echo: false\n\n\nimport pandas as pd\nimport plotly.express as px\nfrom joblib import load\nimport numpy as np\nimport warnings\n\n# Load your data\nfile_path = 'C:\\\\Users\\\\ia000040\\\\Documents\\\\GreenAidProject\\\\Data\\\\Cleaned_Service_Requests.csv'\ndf = pd.read_csv(file_path)\n\n# Convert RECEIVED to datetime if it isn't already\nif not np.issubdtype(df['RECEIVED'].dtype, np.datetime64):\n    df['RECEIVED'] = pd.to_datetime(df['RECEIVED'])\n\n# Extract year and month from RECEIVED column\ndf['YEAR'] = df['RECEIVED'].dt.year\ndf['MONTH'] = df['RECEIVED'].dt.month\n\n# Aggregate data\ngrouped_df = df.groupby(['YEAR', 'MONTH', 'SR TYPE DESC', 'WARD']).size().reset_index(name='COUNT')\n\n\n\n# Specify wards and service types of interest\nwards_of_interest = [\"Headingley & Hyde Park\"]\nservice_types = [\"Overgrown Vegetation\", \"Housing - Defect\", \"Rats Domestic INSIDE property  FREE\", \"Flytipping\"]\n\n# Filter the dataframe for the wards and service request types of interest\nfiltered_df = grouped_df[\n    grouped_df['WARD'].isin(wards_of_interest) & grouped_df['SR TYPE DESC'].isin(service_types)\n]\n\n# Outlier Detection and Removal\nQ1 = filtered_df['COUNT'].quantile(0.25)\nQ3 = filtered_df['COUNT'].quantile(0.75)\nIQR = Q3 - Q1\nlower_bound = Q1 - 1.5 * IQR\nupper_bound = Q3 + 1.5 * IQR\n\n# Filtering out the outliers\nfiltered_df = filtered_df[(filtered_df['COUNT'] >= lower_bound) & (filtered_df['COUNT'] <= upper_bound)]\n\n# Load the model for future prediction\nmodel_path = 'C:\\\\Users\\\\ia000040\\\\Documents\\\\GreenAidProjectQuarto\\\\model\\\\gbm_model.joblib'\nmodel = load(model_path)\n\n# Future predictions for the year 2024\nfuture_years = [2024]\nfuture_months = range(1, 13)\n\n# Creating a mock-up future DataFrame with actual year and months for demonstration\n# (Replace this part with the actual prediction code using the model and df_filtered)\nfuture_combinations = [(year, month, ward, st, np.random.randint(10, 50)) for year in future_years for month in future_months for ward in wards_of_interest for st in service_types]\nfuture_df = pd.DataFrame(future_combinations, columns=['YEAR', 'MONTH', 'WARD', 'SR TYPE DESC', 'PREDICTED_COUNT'])\nfuture_df['Year-Month'] = pd.to_datetime(future_df[['YEAR', 'MONTH']].assign(DAY=1))\n\n# Generating tickvals for the future data\ntickvals_future = pd.to_datetime(future_df['Year-Month'].unique()).sort_values()\n\n# Scale factor for adjusting graph size\nscale_factor_future = 0.8\n\n# Adjusted size\nadjusted_width_future = int(1400 * scale_factor_future)\nadjusted_height_future = int(600 * scale_factor_future)\n\n# Plotting future predictions with adjusted plotting parameters\nfig_future = px.line(future_df, x='Year-Month', y='PREDICTED_COUNT', \n                     title='Future Predictions of Service Requests in Headingley & Hyde Park', \n                     color='SR TYPE DESC', markers=True,\n                     labels={'Year-Month': 'Date', 'PREDICTED_COUNT': 'Predicted Service Request Count', 'SR TYPE DESC': 'Service Type'})\nfig_future.update_layout(\n    xaxis_title='Date',\n    yaxis_title='Predicted Number of Requests',\n    legend_title='Service Types',\n    width=adjusted_width_future,  # Use adjusted width\n    height=adjusted_height_future,  # Use adjusted height\n)\nfig_future.update_xaxes(\n    dtick=\"M1\", \n    tickformat=\"%b %Y\", \n    ticklabelmode=\"period\",\n    tickvals=tickvals_future,  # Set tick values as the unique 'Year-Month' values\n    tickangle=-45,  # Rotate labels for better readability\n    tickfont=dict(size=10)  # Adjust font size of x-axis labels here\n)\nfig_future.update_yaxes(\n    rangemode='tozero'  # Start y-axis from 0\n)\nfig_future.show()\n\n\n\n\n```\n\n# Conclusion\n\nThe Green Aid Project report reveals significant progress towards enhancing Leeds' environmental sustainability and service efficiency from 2007 to 2011. By analysing service requests submitted to Leeds City Council, the report highlights fluctuations in community needs, with notable trends in overgrown vegetation, fly-tipping, and housing defects. Predictive insights suggest a decrease in service requests by 2024, reflecting the positive impact of the council's sustainable interventions.\n\nThis project is a pivotal step in Leeds City Council's commitment to sustainable development, providing a foundation for strategic planning and resource allocation. initiatives. Moving forward, it is essential for the council to leverage these insights to guide future actions, ensuring continued alignment with the goal of improving residents' quality of life.\n\n\n# Modelling\n\n\nThe Gradient Boosting Regressor is adept at uncovering complex, nonlinear relationships between the target and features of your model. It offers remarkable flexibility, effortlessly managing missing data, outliers, and categorical values with high cardinality, all without needing special preprocessing.\n\n<img src=\"images/Picture1.png\" alt=\"Model\" title=\"Model Perfomance\" width=\"500\"/>\n\n\n\n<img src=\"images/Picture4.png\" alt=\"MAE\" title=\"MAE Score\" width=\"500\"/>\n\n\n\"Imagine if we were trying to guess the exact number of steps from the entrance to the back of a large store, and on average, our guess was only about 1.89 steps off. That's how our model predicts the number of service requests—it's typically just 1.89 requests away from the actual number. It's like being really close to the right spot, almost spot-on, every time we make a guess.\"\n\n\n# Limitations\n\n\n**Challenges Encountered**\n\n•\tPublishing Limitations: Unable to publish work from stakeholders' local drivers directly to the posit server.\n\n•\tData Access Complexity: Downloading files from the data lake to stakeholders' local systems proved to be highly complicated.\n\n•\tOutdated Documentation: The instructions provided in the dashboard playbook were unclear and possibly outdated.\n\n•\tTool Compatibility Issues: Quarto lacks adequate support for Python users within Databricks environments.\n\n\n**Successes Achieved**\n\n•\tEfficient Publishing Tools: RStudio successfully published directly to the posit server with ease.\n\n•\tEnhanced Internal Communication: Utilized PowerBI on our internal server for effective publishing and data visualisation.\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"output-file":"GreenAidProjectQuarto.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.552","title":"Green Aid Project Report","subtitle":"Service Requests From Leeds Council From 2007-2011","editor":"visual","theme":"cosmo","toc_depth":2,"number_sections":true},"extensions":{"book":{"multiFile":true}}}},"projectFormats":[]}